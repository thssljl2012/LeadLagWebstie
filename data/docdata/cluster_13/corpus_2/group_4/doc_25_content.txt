 for example:      TKeyResponse CPageShowView::OfferKeyEventL(const TKeyEvent&amp;amp;amp; aKeyEvent,           TEventCode aType)   {              if ( ( aType == EEventKey ) &amp;amp;amp;&amp;amp;amp; ( aKeyEvent.iCode == EKeyOK ) )        {           iEikonEnv-&amp;amp;gt;AppUiFactory()-&amp;amp;gt;MenuBar()-&amp;amp;gt;SetMenuTitleResourceId(R_MYOWN_MENUBAR);              if ( iEikonEnv-&amp;amp;gt;AppUiFactory()-&amp;amp;gt;MenuBar() )            {            iEikonEnv-&amp;amp;gt;AppUiFactory()-&amp;amp;gt;MenuBar()-&amp;amp;gt;StopDisplayingMenuBar();            }            if (iEikonEnv-&amp;amp;gt;AppUiFactory()-&amp;amp;gt;MenuBar())            {                iEikonEnv-&amp;amp;gt;AppUiFactory()-&amp;amp;gt;MenuBar()-&amp;amp;gt;TryDisplayMenuBarL();            }        return EKeyWasConsumed;        }    }           Quote:                                 Originally Posted by  stenlik                         Hi,      there are many ways, how to hide CBA buttons. The favorite one is to define following resources:           Code:     RESOURCE EIK_APP_INFO  {   cba = r_empty_cba;  }       // ---------------------------------------------------------  //     //    Empty CBA buttons - only with the exit button  //    on the right   //  // ---------------------------------------------------------     RESOURCE CBA r_empty_cba  {   buttons =   {    CBA_BUTTON     {     id = EAknSoftkeyEmpty;    },    CBA_BUTTON     {     id = EEikCmdExit;     }   };  }    For fullscreen (if you want it) just call in the container the SetRect() - the size of rectangle depends if you want to hide also status pane or not.      Another method to hode control pane(with some drawbacks) is MEikAppUiFactory::Cba() - just check SDK and DiBo.      Blitting bitmap is easy - go over CFbsBitmap class and CWindowGc::BitBlt() - use this method in your Draw() implementetion in your container control.      BR   STeN                       
