  Hi.    I have subclassed a text edit control. It will modify the text with the way  I want and shows it, but the real data must be recovered after painting.  For example, if user inputs &amp;quot;abc&amp;quot;, it will show &amp;quot;cba&amp;quot; but the real data must  be remain &amp;quot;abc&amp;quot;.  So I tried like this:    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  LRESULT CALLBACK MyEditProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM  lParam)  {  LRESULT ret = 0;  if(g_pOrgEditProc)  //This is original procedure  {  switch(uMsg)  {  case WM_PAINT:  {  int nTxtLen = CallWindowProc(g_pOrgEditProc, hWnd, WM_GETTEXTLENGTH, 0,  0);  if(nTxtLen &amp;amp;gt; 0)  {  TCHAR *lpszOrgText = (TCHAR *)malloc(sizeof(TCHAR)*(nTxtLen+1));  TCHAR *lpszTmpText = (TCHAR *)malloc(sizeof(TCHAR)*(nTxtLen+1));    CallWindowProc(g_pOrgEditProc, hWnd, WM_GETTEXT, (WPARAM)nTxtLen,  (LPARAM)lpszOrgText);    for(int i=0;i&amp;amp;lt;nTxtLen;i++)  {  lpszTmpText[i] = lpszOrgText[nTxtLen-i-1];  }  CallWindowProc(g_pOrgEditProc, hWnd, WM_SETTEXT, 0,  (LPARAM)lpszTmpText);  ret = CallWindowProc(g_pOrgEditProc, hWnd, uMsg, wParam, lParam);  CallWindowProc(g_pOrgEditProc, hWnd, WM_SETTEXT, 0,  (LPARAM)lpszOrgText);    delete lpszOrgText;  delete lpszTmpText;  }  else  ret = CallWindowProc(g_pOrgEditProc, hWnd, uMsg, wParam, lParam);    }  break;  default:  return CallWindowProc(g_pOrgEditProc, hWnd, uMsg, wParam, lParam);  }//switch(uMsg)    return ret;  }//if(g_pOrgEditProc)  return DefWindowProc(hWnd, uMsg, wParam, lParam);  }  //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    The result for calling&amp;quot; CallWindowProc(g_pOrgEditProc, hWnd,  WM_GETTEXTLENGTH, 0, 0);&amp;quot; returns correct length, but the result for calling  (LPARAM)lpszOrgText)&amp;quot; is weird.  If I have input &amp;quot;abc&amp;quot;, I will get &amp;quot;ab&amp;quot; and returned text length is &amp;quot;3&amp;quot;, not    Calling GetWindowText() will send WM_GETTEXT message and it will hang up, so  I won&amp;#039;t use it. Is there any method to retrieve the text without calling  GetWindowText() or using WM_GETTEXT?    Thanks,    With BR,  Daniel Kim  
